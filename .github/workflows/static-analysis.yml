name: Static Security Analysis

on:
  push:
    branches:
      - master
    paths:
      - "static/**"
      - "views/**"
      - "*.json"
      - "*.js"
      - "Dockerfile"
      - ".github/workflows/**"
      - ".github/scripts/**"
      - "!*.md"

jobs:
  init:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install

  secrets:
    name: Gitleaks Scan
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Scan with Gitleaks
        run: |
          docker run --rm \
            -v "$(pwd):/pwd" \
            zricethezav/gitleaks:latest \
            detect \
            --verbose \
            --source="/pwd" \
            --report-format=json \
            --report-path=/pwd/gitleaks-result.json \
            --log-level=debug \
            --no-git || true
        continue-on-error: true
      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-json-reports
          path: gitleaks-result.json
        if: always()

  sca:
    runs-on: ubuntu-latest
    name: SCA Security Scan
    needs: [init]
    steps:
      - name: Checkout action
        uses: actions/checkout@v4
      - name: Snyk SCA Analysis
        run: |
          npx snyk test --file=package.json --severity-threshold=high --json > snyk-results.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-json-reports
          path: snyk-results.json
        if: always()

  sast:
    runs-on: ubuntu-latest
    name: SAST Security Scan
    container:
      image: returntocorp/semgrep
    needs: [init]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: full scan
        run: |
          semgrep \
          --json --output report.json \
          --metrics=off \
          --config="p/javascript"
        continue-on-error: true
      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-json-results
          path: report.json

  container-scan:
    runs-on: ubuntu-latest
    name: Container Security Scan
    needs: [init]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t app-image:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db,public.ecr.aws/aquasecurity/trivy-db
        with:
          image-ref: "app-image:${{ github.sha }}"
          format: "json"
          output: "trivy-results.json"
          severity: "CRITICAL,HIGH"
        continue-on-error: true
      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-json-results
          path: trivy-results.json

  upload_dojo:
    needs: [secrets, sca, sast, container-scan]
    runs-on: ubuntu-latest
    env:
      DEFECTDOJO_TOKEN: ${{ secrets.DEFECTDOJO_TOKEN }}
      DEFECTDOJO_URL: ${{ vars.DEFECTDOJO_URL || 'https://demo.defectdojo.org' }}
      DEFECTDOJO_ENGAGEMENT_ID: ${{ vars.DEFECTDOJO_ENGAGEMENT_ID || '15' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - name: install python dependencies
        run: |
          pip install requests
      - name: download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./scan-results
      - name: list downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./scan-results -type f -name "*.json" -o -name "*.xml"
      - name: Upload to OWASP Defectdojo
        run: |
          python .github/scripts/eko-upload-result.py ./scan-results/gitleaks-json-reports/gitleaks-result.json
          python .github/scripts/eko-upload-result.py ./scan-results/snyk-json-reports/snyk-results.json
          python .github/scripts/eko-upload-result.py ./scan-results/semgrep-json-results/report.json
          python .github/scripts/eko-upload-result.py ./scan-results/trivy-json-results/trivy-results.json
